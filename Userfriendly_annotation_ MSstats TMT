




library(tidyverse)
library("writexl")
library(dplyr)
library(MSstatsTMT)
library(stringr)
library(stringi)
theme_set(theme_bw())

#import data
PSMs <-  "~/CS7290/PSMs.xlsx"
PSMs<-readxl::read_excel(PSMs)
#Reaname column name according to Diffrent version #PSMs file:

#main header names change code
Changecolname <- function(non_edited_PSMs){
  editedPSMsfile <-non_edited_PSMs %>% 
    rename_at(vars(starts_with(c("12"))), dplyr::funs(str_replace(., "^", "Abundance.."))) %>% 
    rename_at(vars(starts_with(c("13"))), dplyr::funs(str_replace(., "^", "Abundance.."))) %>% 
    dplyr::rename_all(list(~make.names(.)))
  editedPSMsfile
}
editPSMs <- Changecolname(non_edited_PSMs)
####

###############################################################
#Partition file names to generate other columns
Pattern <- function (editedPSMsfile,TMT_n=10){
  
  ###################################################################### 
  #get all possible TMT channels
  TMT6<- data.frame(TMT=data.frame("126","127","128","129","130","131"))
  TMT10<- data.frame(TMT = data.frame("126","127N","127C","128N","128C", "129N", "129C","130N", "130C", "131"))
  TMT11<- data.frame(TMT = data.frame("126","127N","127C","128N","128C", "129N", "129C","130N", "130C", "131N","131C"))
  #allocate space for the data
  TMT<-data.frame(TMT=rep(as.character(NA),TMT_n))
  #get user input to assign TMT channels
  TMT<-ifelse(TMT_n==10,TMT %>% dplyr::mutate(TMT=TMT10$TMT),ifelse(TMT_n==11,TMT %>% dplyr::mutate(TMT=TMT11$TMT),TMT %>% dplyr::mutate(TMT=TMT6$TMT)))
  TMT<-data.frame(TMT=TMT[[1]])
  #Allocate memory in a data frame
  Annotation3<-data.frame(Run = NA,shortnames=NA,Mixture=NA,TechRepMixure=NA,BioReplicate=NA,Pattern1=NA,Channel=NA)
  #start filling out columns
  Annotation3<-data.frame(Run = unique(editPSMs$Spectrum.File))
  pattern1<-stri_match_first_regex(Annotation3$Run,"[:upper:][:digit:][:digit:][:punct:]|[:upper:][:digit:][:punct:]")[,1]
  RunID <- str_split(Annotation3$Run,pattern1,simplify = TRUE)[,1]
  Annotation3$shortnames<- RunID 
  
  #check number of times data appears per run ID
  check<-Annotation3 %>% dplyr::group_by(shortnames) %>% dplyr::mutate(N = dplyr::n())
  check<-check %>% dplyr::filter(N>1) #filter out group sizes of 1
  
  Annotation3<-Annotation3 %>% subset(shortnames %in% unique(check$shortnames))
  pattern1<-stri_match_first_regex(Annotation3$Run,"[:upper:][:digit:][:digit:][:punct:]|[:upper:][:digit:][:punct:]")[,1]
  ##########
  RunID_uniqe <- unique(Annotation3$shortnames)
  RunID_uniqe <-data.frame(shortnames=RunID_uniqe )
  size_RunID <-nrow(RunID_uniqe)
  
  Fra_UI<- vector() 
  for (i in 1:size_RunID) {
    print ( RunID_uniqe[i,1])
    Fra_UI[i]<-readline(prompt="What is the Sample ID from PD, please use numbers 0,1,2...")
    
    #F1="DMSO_1"
    #F2="DMSO_2"
    #F3="655_1"
    #F4="655_2"
  }
  Fra_UI <-  data.frame(shortnames=RunID_uniqe,Fraction=(do.call(paste0, expand.grid(factor(c('F'),levels = c('F')),Fra_UI))))
  
  Annotation3 <-dplyr::left_join(Annotation3,Fra_UI,by="shortnames")
  Annotation3 <- Annotation3 %>% dplyr::mutate(Pattern1=pattern1)
  
  #generate Bioreplicate column
  Annotation3 <-Annotation3  %>% dplyr::mutate(BioReplicate=stri_match_first_regex(Annotation3$shortnames,"[:punct:][:digit:][:punct:]") )
  Annotation3 <-Annotation3  %>% dplyr::mutate(BioReplicate=stri_match_first_regex(Annotation3$BioReplicate,"[:digit:]") ) 
  
  #order fractions
  Annotation3 <- Annotation3[order(Annotation3[,"Pattern1"]),]
  #split
  Annotation3<- Annotation3 %>% dplyr::group_split(shortnames,BioReplicate,Fraction)
  #add fractions
  Annotation3<- lapply(Annotation3,function(x) x %>% dplyr::mutate(samplefractions=row.names(.)))
  #repeat fractions 10 times because all fractions were labeled with TMT
  Annotation3<-lapply(Annotation3,function(x) x[rep(seq_len(nrow(x)), each = 10), ]) 
  #now group and label TMT
  Annotation3<-lapply(Annotation3,function(x) x %>% dplyr::mutate(Channel=rep(TMT10,nrow(x)/length(TMT10))))
 
  
  #generate Techrepmixture information
  Annotation3<- lapply(Annotation3,function(x) x %>% dplyr::mutate (TechRepMixture=1))
  #generate Conditioninformation
  Annotation3 <-lapply(Annotation3,function(x) x  %>% dplyr::mutate(Condition = ifelse(Channel == "126", "Norm",ifelse(Fraction=="F1"|Fraction=="F2",0,1))))
  #generate Mixture information
  Annotation3<-lapply(Annotation3,function(x) x %>% dplyr::mutate (Mixture=Condition))
  #generate  final table
  Annotation3<-do.call(rbind.data.frame, Annotation3)
  return(Annotation3)
}
#call function
Annotation<- Pattern(editPSMs,10)

editPSMs<-subset(editPSMs, Spectrum.File!="cpQEX190924_A549_DMSO_1_A10_eFT_30K_22min.raw")
########################################
#Masstats TMT
Norm_input<- PDtoMSstatsTMTFormat(
  editPSMs,
  Annotation,
  which.proteinid = "Protein.Accessions",
  useNumProteinsColumn = TRUE,
  useUniquePeptide = TRUE,
  rmPSM_withMissing_withinRun = TRUE,
  rmPSM_withfewMea_withinRun = TRUE,
  rmProtein_with1Feature = FALSE,
  summaryforMultipleRows = sum
)

finalNorm<-proteinSummarization(
  Norm_input,
  method = "msstats",
  global_norm = TRUE,
  reference_norm = TRUE,
  remove_norm_channel = TRUE,
  remove_empty_channel = TRUE,
  MBimpute = TRUE,
  maxQuantileforCensored = NULL
)

plot_Norm<-dataProcessPlotsTMT(
  data.peptide=Norm_input,
  data.summarization=finaltest,
  type='QCPlot',
  ylimUp = FALSE,
  ylimDown = FALSE,
  x.axis.size = 10,
  y.axis.size = 10,
  text.size = 4,
  text.angle = 90,
  legend.size = 7,
  dot.size.profile = 2,
  ncol.guide = 5,
  width = 10,
  height = 10,
  which.Protein = "all",
  originalPlot = TRUE,
  summaryPlot = TRUE,
  address = ""
)

#write_xlsx (finaltest,"C:\\Users\\karin\\Documents\\R\\MSstat\\MSstats_userfriendly_annotationfilecode\\finaltest.xlsx") 
