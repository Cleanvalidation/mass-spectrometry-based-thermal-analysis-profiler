




#Reaname column name according to Diffrent version PSMs file:

#main header names change code
Changecolname <- function(non_edited_PSMs){
  editedPSMsfile <-non_edited_PSMs %>% 
    rename_at(vars(starts_with(c("12"))), dplyr::funs(str_replace(., "^", "Abundance.."))) %>% 
    rename_at(vars(starts_with(c("13"))), dplyr::funs(str_replace(., "^", "Abundance.."))) %>% 
    dplyr::rename_all(list(~make.names(.)))
  editedPSMsfile
}
editedPSMsfile <- Changecolname(non_edited_PSMs)
############################################################
#generate RUn IDS data frame:
extract_data<-function(editedPSMsfile){
  #Annotation3<-data.frame(unique(PSMs_clean$Spectrum.File))
  
  Annotation3<-data.frame(Run=(unique(editedPSMsfile$Spectrum.File)))
  N1 <- readline(prompt="How many TMTchannel you used, answere with number of channel, for example 10 or 6 or 11... ?")
  #Annotation3 <- data.frame(Annotation3 =rep(Annotation3,N1))
 
  
  #Annotation3$Fraction=Annotation3$Annotation3
  #colnames(Annotation3)[1] <- "Fraction"
  return(Annotation3)
}

# Call 
Annotation3 <- extract_data(editedPSMsfile)

###############################################################
#finding pattern and unique Id for simplicity of user
Pattern <- function (Annotation3){
  pattern1<-stri_match_first_regex(Annotation3$Run,"[:upper:][:digit:][:digit:][:punct:]|[:upper:][:digit:][:punct:]")[,1]
  RunID <- str_split(Annotation3$Run,pattern1,simplify = TRUE)[,1]
  #Annotation3<-data.frame(Annotation3)
  Annotation3$shortnames<- RunID 
  RunID_uniqe <- unique(RunID)
  RunID_uniqe <-data.frame(shortnames=RunID_uniqe )
  names(RunID_uniqe )<-"shortnames"
  size_RunID <-nrow(RunID_uniqe)
  Fra_userinput<- vector() 
  for (i in 1:size_RunID) {
    print ( RunID_uniqe[i,1])
    Fra_userinput[i]<-readline(prompt="what is your Fraction name assigned in PD, please spesify return value with numbers 0,1,2...,n")

    #F1="DMSO_1"
    #F2="DMSO_2"
    #F3="655_1"
    #F4="655_2"
  }
  
  Fra_userinput <-  data.frame(shortnames=RunID_uniqe,Sampleid=(do.call(paste0, expand.grid(factor(c('F'),levels = c('F')),Fra_userinput))))
  
 
  Annotation3 <-dplyr::left_join(Annotation3,Fra_userinput,by="shortnames")
  
  Annotation3 <- Annotation3 %>% dplyr::mutate(Pattern1=pattern1)
  
  
  
  #generate Bioreplicate column
  Annotation3 <-Annotation3  %>% dplyr::mutate(BioReplicate=stri_match_first_regex(Annotation3$shortnames,"[:punct:][:digit:][:punct:]") )
  Annotation3 <-Annotation3  %>% dplyr::mutate(BioReplicate=stri_match_first_regex(Annotation3$BioReplicate,"[:digit:]") )
 ###################################################################### 
  #need edit?
  TMT6=c("126","127","128","129","130","131")
  TMT10= c("126","127N","127C","128N","128C", "129N", "129C","130N", "130C", "131")
  TMT11=c("126","127N","127C","128N","128C", "129N", "129C","130N", "130C", "131","131c")


  #Annotation3 <- dplyr::bind_rows(Annotation3)
  Annotation3 <- Annotation3[order(Annotation3[,"Pattern1"]),]
  Annotation3<- Annotation3 %>% dplyr::group_split(shortnames,BioReplicate,Sampleid)
  Annotation3<- lapply(Annotation3,function(x) x %>% dplyr::mutate(Fraction=row.names(.)))
  Annotation3<-lapply(Annotation3,function(x) x %>% dplyr::mutate(Channel=data.frame(Channel==TMT10))) 
  ############################################################################################################################
  


# Call
Annotation3 = Pattern(Annotation3)




###################################################################
#Generating the Data frame consist of Annotation file columns
Annotation3$Mixture <- ""
Annotation3$TechRepMixture <- ""
#Annotation3$Channel <- ""
Annotation3$BioReplicate <- ""
Annotation3$Condition<- "" 




#generate Mixture information
Annotation3<-Annotation3 %>% dplyr::mutate (Mixture="Empty")

#generate Techrepmicture information
Annotation3<- Annotation3 %>% dplyr::mutate (TechRepMixture=1)

#rearrange column Run for easier generating the channel's column
Annotation3 <- Annotation3[order(Annotation3[,1]),]

#generate  TMT10channel(it needs edit)
if(N==10){
  TMT=TMT10
}else(N==6){
  TMT=TMT6
}

TMT=ifelse(N==6,TMT6,TMT11)
TMT=ifelse(N==10,c("126","127N","127C","128N","128C", "129N", "129C","130N", "130C", "131"), ifelse(N==6,TMT6,c("126","127N","127C","128N","128C", "129N", "129C","130N", "130C", "131","131c")))  


TMT6=data.frame("126","127","128","129","130","131")
TMT10= c("126","127N","127C","128N","128C", "129N", "129C","130N", "130C", "131")
TMT11=c("126","127N","127C","128N","128C", "129N", "129C","130N", "130C", "131","131c")
N2<-NROW(unique(Annotation$Run))
#Annotation <-Annotation %>% dplyr::mutate (Channel = rep(TMT10,N2))


#generate condition column?
Annotation3 <-Annotation3  %>% dplyr::mutate(Condition = ifelse(Channel == 126, "Norm",ifelse(Fraction == "F1" | Fraction == "F2",0,1)) )

                                       
#########################################################################
#clean data (it needs edit)
nonID<-  Fra_userinput %>% filter_all(any_vars(. %in% "F0"))
PSMsnew<-subset(editedPSMsfile, Spectrum.File==nonID)
Annotationnew<-subset(Annotation3,Fraction==nonID)

